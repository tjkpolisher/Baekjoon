# 31530: 새로운 AVL 트리 만들기
# 특이사항: 서브태스크, 다국어(영어)(한국어 번역)
# 출처: 제4회 고려대학교 MatKor Cup: 2024 Winter/Spring 연습 세션 PB번
# 알고리즘 분류: 다이나믹 프로그래밍

# 1. 테스트 케이스의 개수 T 입력 (1 ≤ T ≤ 10^6)
# 2. 첫 번째 줄에 트리의 높이 h, S의 원소의 개수 |S| 입력 (1 ≤ h ≤ 10^6, 1 ≤ |S| ≤ 3)
# 3. 노드별로 가능한 균형값을 나타내는 S의 서로 다른 원소 |S|개가 오름차순으로 입력
# [보충설명] 가능한 S의 조합: {-1}, {0}, {1}, {-1, 0}, {0, 1}, {-1, 1}, {-1, 0, 1} 중 하나
# 4. 바텀업 방식으로 점화식 설계
# 4-1. 높이 1일 때 가능한 트리 모양 = 1, 1, 1, 1, 1, 1, 1로 설정
# 4-2. 높이 2일 때 가능한 트리 모양 = 1, 1, 1, 2, 2, 2, 3
# 4-3. 점화식(실제 dp 테이블의 모든 원소는 점화식으로 계산한 수를 10 ** 9 + 7로 나눈 나머지)
# 4-3-1. k = 0, 1, 2일 때 dp[i][k] = dp[i - 1][k]
# 4-3-2. k = 3, 5일 때 dp[i][k] = dp[i - 2][k] * dp[i - 1][k] + dp[i - 1][k] * dp[i - 1][k]
# 4-3-3. k = 4일 때 dp[i][k] = dp[i - 2][k] * dp[i - 1][k] + dp[i - 1][k] * dp[i - 2][k]
# 4-3-3. k = 6일 때 dp[i][k] = dp[i - 2][k] * dp[i - 1][k] + dp[i - 1][k] * dp[i - 1][k] + dp[i - 1][k] * dp[i - 2][k]
# 5. dp 테이블에서 h와 S의 경우의 수에 맞는 원소 출력

import sys
input = sys.stdin.readline

MOD = 10 ** 9 + 7

dp = [[0 for _ in range(7)] for _ in range(10 ** 6 + 1)]  # 높이별로 가능한 트리의 모양 개수를 저장할 dp 테이블
dp[0] = [1, 1, 1, 1, 1, 1, 1]  # 높이 1인 트리는 나올 수 있는 경우의 수가 하나 뿐이고, 암묵적으로 모든 경우의 수를 1로 지정
dp[1] = [1, 1, 1, 2, 2, 2, 3]  # 높이 2인 트리의 경우의 수

# 점화식 계산
for i in range(2, 10 ** 6 + 1):
    dp[i][0] = dp[i - 1][0] % MOD
    dp[i][1] = dp[i - 1][1] % MOD
    dp[i][2] = dp[i - 1][2] % MOD
    dp[i][3] = (dp[i - 2][3] * dp[i - 1][3] + dp[i - 1][3] * dp[i - 1][3]) % MOD
    dp[i][4] = (dp[i - 2][4] * dp[i - 1][4] + dp[i - 1][4] * dp[i - 2][4]) % MOD
    dp[i][5] = (dp[i - 2][5] * dp[i - 1][5] + dp[i - 1][5] * dp[i - 1][5]) % MOD
    dp[i][6] = (dp[i - 2][6] * dp[i - 1][6] + dp[i - 1][6] * dp[i - 1][6] + dp[i - 1][6] * dp[i - 2][6]) % MOD

T = int(input())
for _ in range(T):
    h, S_norm = map(int, input().split())
    h -= 1
    S = input().rstrip()

    if S == '-1':
        print(dp[h][0])
    elif S == '0':
        print(dp[h][1])
    elif S == '1':
        print(dp[h][2])
    elif S == '-1 0':
        print(dp[h][3])
    elif S == '-1 1':
        print(dp[h][4])
    elif S == '0 1':
        print(dp[h][5])
    else:
        print(dp[h][6])
